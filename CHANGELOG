Version 0.10.0 (2019-07-11)
---------------------------

- renamed method `bytes` (and friends) of `EncodingSetup#Sealed` to `result`
- renamed `...Bool` to `...Boolean` everywhere, for consistency
- removed `forCaseClass` macros from `core` module (use array-based derivation instead)
- removed dependendy on magnolia
- added alternative codec for Options (`NullOptions`) (#29)
- added `Codec.bimap` (#25)
- added support for directly reading from and writing to files
- added support for reading from `Iterator[Input]`
- added support for writing to `java.io.OutputStream`
- improved codec derivation (#28, #31)
- fixed key collision error when deriving codec for diamond ADT (#34)
- extended `Decoder[Array[Byte]]` to also accept arrays (#15)
- expanded benchmarking scope to also include upickle and jsoniter-scala
- enabled unified Scala 2.12/2.13 cross-building
- added paradox-based project website


Version 0.9.0 (2019-05-11)
--------------------------

- significantly improved JSON support on all fronts
- changed map-based ADT encoding to single-element map
- rename `Encoder.compose` to `Encoder.contramap`
- renamed @TypeId to @key, add support for custom map-key naming
- fixed MapBasedCodecs to properly skip complex, extra data elements
- fixed failing derivation for types with java annotations (#13)
- fixed `Codec.forCaseClass` failing for generic case classes (#16)
- added `Input`, `Output` and `ByteAccess` for `java.nio.ByteBuffer`
- added configurable automatic conversion of integers to floating point values (#3)
- added `Nullable[T]` and `Default[T]` abstraction
- added special support for Options with default value `None`
- added support for up to 128 case class members
- hardened CBOR BigInteger and BigDecimal decoding (#8)
- improved error position reporting
- refactored `Input` design for more flexbility in supporting diverse input sources
- internalized magnolia for various patches and Scala 2.13 support
- added Scala 2.13 build (in the `scala2.13` branch, for now)


Version 0.8.0 (2019-04-13)
--------------------------

- added JSON support
- simplified package structure (`io.bullet.borer.core.Cbor` is now `io.bullet.borer.Cbor`)
- added @inline annotations to selected methods likely relevant for JS perf
- flexibilized derived codecs to always accept indefinite-length as well
- added comparative performance benchmarks (JSON only so far)
- introduced "NumberString" abstraction for cleaner & faster JSON decoding
- added missing pre-defined decoder for `HashMap[T]`
- extended pre-defined `Array` codec to also support primitives (issue #2)
- many other larger and smaller improvements across the whole library


Version 0.7.0 (2019-03-08)
--------------------------

borer-core:
- simplify API by removing explicit `Bytes` type parameter from all abstractions
- allow for mixed `ByteAccess` in a single encoding / decoding run
- various smaller improvements

borer-akka & border-scodec:
- add missing Codecs for akka ByteString and scodec ByteVector


Version 0.6.0 (2019-03-06)
--------------------------

borer-core:
-Refactor main entry-point DSL for clarity and convenience

borer-core & borer-derivation:
- Remove array-wrapping of derived codecs for `Product1` types


Version 0.5.1 (2019-03-05)
--------------------------

borer-derivation:
- Fix broken round-trip of `deriveCaseClassCodec` for zero- and single-member case classes


Version 0.5.0 (2019-03-04)
--------------------------

first public release